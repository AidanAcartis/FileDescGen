Voici le code pour scraper la reponse de chatgpt:"import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
import time

def scrap_chatgpt(question):
    """Automatise la récupération des réponses de ChatGPT sur le web"""
    
    # Lancer un navigateur Chrome furtif
    options = uc.ChromeOptions()
    driver = uc.Chrome(options=options)
    
    try:
        # Ouvrir ChatGPT
        driver.get("https://chat.openai.com/")
        time.sleep(5)

        # Trouver la zone de texte et taper la question
        textarea = driver.find_element(By.TAG_NAME, "textarea")
        textarea.send_keys(question)
        textarea.send_keys("\n")
        time.sleep(10)  # Attendre que la réponse soit générée

        # Récupérer la réponse
        response_elements = driver.find_elements(By.CSS_SELECTOR, ".markdown")
        response_text = "\n".join([elem.text for elem in response_elements])

        return response_text

    finally:
        driver.quit()

# Exemple d'utilisation : Pose directement la question sur Keima Katsuragi
question = "Keima Katsuragi"
reponse = scrap_chatgpt(question)

print("Réponse scrappée :")
print(reponse)
" mais elle ne marche pas parcequ'elle n'utilise pas le bon balise, voici le div de la questionnement:"<div class="w-full">
            <div class="flex justify-center empty:hidden"></div>
            <form class="w-full" type="button" aria-haspopup="dialog" aria-expanded="false"
            aria-controls="radix-:Rf799t9jaklj5:" data-state="closed">
                <div class="relative z-[1] flex h-full max-w-full flex-1 flex-col">
                    <div class="group relative z-[1] flex w-full items-center" style="--force-hide-label: none;">
                        <div class="w-full">
                            <div id="composer-background" class="flex w-full cursor-text flex-col rounded-3xl border border-token-border-light
                             px-3 py-1 duration-150 ease-in-out contain-inline-size motion-safe:transition-[color,background-color,border-color
                             text-decoration-color,fill,stroke,box-shadow] dark:border-none dark:shadow-none shadow-[0_9px_9px_0px_rgba(0,0,0,0.01),
                             _0_2px_5px_0pxba(0,0,0,0.06)] bg-token-main-surface-primary dark:bg-[#303030]" style="view-transition-name:var(--vt-composer)"
                            >
                                <div class="flex min-h-[44px] items-start pl-1">
                                    <div class="min-w-0 max-w-full flex-1">
                                        <div class="_prosemirror-parent_1r7mb_1 text-token-text-primary max-h-[25dvh] max-h-52
                                         overflow-auto default-browser"
                                        >
                                            <textarea class="block h-10 w-full resize-none border-0 bg-transparent px-0
                                             py-2 text-token-text-primary placeholder:text-token-text-tertiary" autofocus placeholder="Ask Anything"
                                             data-virtualkeyboard="true" style="display: one;"></textarea>
                                             <script nonce>
                                                window.__oai_logHTML?
                                                window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function()
                                             {window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))
                                             </script>
                                             <div contenteditable="true" translate="no" class="ProseMirror" id="prompt-textarea" data-virtualkeyboard="true">
                                                <p data-placeholder="Ask anything" class="placeholder">
                                                    <br class="ProseMirror-trailingBreak">
                                                    ::after
                                                </p>
                                             </div>
                                        </div>
                                    </div>
                                    <div class="w-[32-px] pt-1"></div>
                                </div>
                                <div class="mb-2 mt-1 flex items-center justify-between sm:mt-5"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>", et voici un code pour recuperer la reponse:"// Cibler toutes les div avec la classe spécifiée
const allDivs = document.querySelectorAll('.markdown.prose.w-full.break-words.dark\\:prose-invert.dark');

// Vérifier s'il existe au moins une div correspondante
if (allDivs.length > 0) {
  // Récupérer la dernière div
  const lastDiv = allDivs[allDivs.length - 1];
  
  // Obtenir le contenu HTML de la div (inclut toutes les balises enfants)
  const content = lastDiv.innerHTML;

  console.log('Contenu extrait:', content);

  // Créer un fichier local avec tout le contenu HTML
  const blob = new Blob([content], { type: 'text/plain' }); // Créer un objet Blob
  const url = URL.createObjectURL(blob); // Générer une URL pour le Blob

  // Créer un lien pour télécharger le fichier
  const a = document.createElement('a');
  a.href = url;
  a.download = 'last_div_content.txt'; // Nom du fichier
  a.click(); // Simuler un clic pour démarrer le téléchargement

  console.log('Fichier téléchargé: last_div_content.txt');
} else {
  console.error('Aucune div correspondante trouvée.');
}
" exploiter les et utiliser les dans le code python pour que notre scrap puisse marcher